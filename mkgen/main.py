import re
import os
import glob
import json

from mkgen.config import get_interpreter
from mkgen.makefile import (
    get_mkgen_indices,
    insert_new_targets,
    construct_target
)
from mkgen.utils import flat


def fn_detect(lines):
    """
    Extracts file paths from code files.
    Regex to extract paths from file lines
    Return a list of:
        * False (no path detected)

    """

    fn_positions = []

    exp = r"(?:'|\")(.*?\/.*?\.[\w:]+.*)(?:'|\")"

    for line in lines:
        match = re.search(exp, line)

        if match:
            fn_positions.append(match.group(1))
        else:
            fn_positions.append(False)

    return fn_positions


def io_detect(path_positions):
    # Function to take a list of path positions and divide them into "inputs"
    # and "outputs"
    # DEV: doc and optimise this better

    # store index of True and distance from previous true in a tuple
    dist = []

    for i, position in enumerate(path_positions):

        if position:

            try:
                prev_position = dist[-1][0]
            except Exception:
                prev_position = 0

            dist.append((i, i - prev_position))

    # Find the highest distance
    max_gap = max([x[1] for x in dist])

    # Define the break point index between input and output groups
    break_point = [x[0] for x in dist if x[1] == max_gap][0] - 1

    # Split input and output indices
    inputs = [x[0] for x in dist if x[0] < break_point]

    outputs = [x[0] for x in dist if x[0] > break_point]

    return [inputs, outputs]


def parse_code_file(config, file, lines):

    fns = fn_detect(lines)
    io = io_detect(fns)
    interpreter = get_interpreter(config, file)
    return construct_target(file, fns, io, interpreter)


def main():
    """
    Assumptions:
        1. os.getcwd() provides the root directory of the project.
        2. The root has a mkgen.json file.
        3. The root has a Makefile file with comments for autogenerated targets:
            * # -- mkgen targets start --
            * # -- mkgen targets end --
    """

    try:
        with open(os.getcwd() + "/mkgen.json") as f:
            config = json.load(f)
    except Exception:
        raise Exception("Unable to find mkgen.json file.")

    try:
        with open(os.getcwd() + "/Makefile", "r") as f:
            make_lines = f.readlines()
    except Exception:
        raise Exception("Unable to find Makefile file.")

    try:
        code_files = get_code_files(config)
    except Exception:
        raise Exception("Unable to locate files for parsing.")

    targets = []

    for file in code_files:

        try:
            with open(file, "r") as f:
                code_lines = f.readlines()
            targets.append(parse_code_file(config, file, code_lines))
        except Exception as e:
            print(f"Unable to parse { file } with Exception { str(e) }. Skipping.")
            pass

    start, end = get_mkgen_indices(make_lines)

    try:
        with open(os.getcwd() + "/Makefile", "w") as f:
            [f.write(x) for x in insert_new_targets(start, end, make_lines, targets)]
    except Exception:
        raise Exception("Unable to write new targets.")

    print(f"Wrote { len(targets) } new targets.")
